input {
  pipeline {
    address => processing_ip
  }
}

filter {



  # IP Range Processing
  if [source][ip] {

     cidr {
        network => ["127.0.0.0/8", "224.0.0.0/4", "240.0.0.0/4"]
        address => ["%{[source][ip]}"]
        add_field => { "[source][range]" => "reserved" }
      }

     cidr {
      network => ["192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8"]
      address => ["%{[source][ip]}"]
      add_field => { "[source][range]" => "private" }
     }

    
   if ! [source][range] {
    mutate { add_field => { "[source][range]" => "public" }}

      # Source GEOIP Processing
      geoip {
        source => "[source][ip]"
        target => "[source][geo]"
        fields => ["city_name", "country_code2", "country_name", "location", "postal_code"]
        add_field => {"[source][geo][country_iso_code]" => "%{[source][geo][country_code2]}"}
      }

      # Source ASN Processing
      geoip {
        database => "/mnt/lookup-table/GeoLite2-ASN.mmdb"
        default_database_type => "ASN"
        source => "[source][ip]"
        target => "[source][geo]"
        tag_on_failure => ["geoip-asn-failed"]
      }

      mutate {
        remove_field => ["[source.geo][country_code2]"]
      }
    }
  }

  if [destination][ip] {
    cidr {
        network => ["127.0.0.0/8", "224.0.0.0/4", "240.0.0.0/4"]
        address => ["%{[destination][ip]}"]
        add_field => { "[destination][range]" => "reserved" }
    }  

    cidr {
      network => ["192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8"]
      address => ["%{[destination][ip]}"]
      add_field => { "[destination][range]" => "private" }
    }
    
    if ! [destination][range] {
     mutate { add_field => { "[destination][range]" => "public" }}

      # Target GEOIP Processing
      geoip {
        source => "[destination][ip]"
        target => "[destination][geo]"
        fields => ["city_name", "country_code2", "country_name", "location", "postal_code"]
        add_field => {"[destination][geo][country_iso_code]" => "%{[destination][geo][country_code2]}"}
      }

      # Target ASN Processing
      geoip {
        database => "/mnt/lookup-table/GeoLite2-ASN.mmdb"
        default_database_type => "ASN"
        source => "[destination][ip]"
        target => "[destination][geo]"
        tag_on_failure => ["geoip-asn-failed"]
      }

      mutate {
        remove_field => ["[destination][geo][country_code2]"]
      }
   
     }

    }
  

  # way to be able to do top N terms queries on flows, not just on one field.
  if [source][ip] and [destination][ip] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "[destination][ip]", "[destination][port]" ]
            }
  }


}

output {
  pipeline { 
    send_to => threat_ip
  }
}

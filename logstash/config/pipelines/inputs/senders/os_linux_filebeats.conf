input {
    beats {
        port => "5045"
        tags => "beats"
        #add_field => { "init_source" => "os_windows" }
        #add_field => { "client" => "mountbatten" }
        add_field => { "[organization][name]" => "mountbatten" }
        add_field => { "[log][sender][type]" => "os" }
        add_field => { "[log][sender][name]" => "linux" }

    }
}

filter {
         mutate { add_field => {"mlfield" => 1} }
         mutate { convert => ["mlfield","integer"] }

          if [message] =~ "multipathd" {
             drop { }
          }

          if [message] =~ "Non-zero metrics" {
             drop { }
          }

          if [message] =~ "org.xfce.ScreenSaver" {
             drop { }
          }

          if [message] =~ "metrics" and [message] =~ "monitor" {
             drop { }
          }


          if ([message] =~ /query:/) {

             if ([message] =~ /ECS/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:clientIP2}#%{NUMBER:port} \(%{HOSTNAME}\): query: %{HOSTNAME:dns.question.name} IN %{WORD:dns.answers.type} +%{GREEDYDATA:temp} \[ECS %{IP:source.ip}/%{NUMBER:subnet}/0]"
                      }
                    }
              } else {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:source.ip}#%{NUMBER:port} \(%{HOSTNAME}\): query: %{HOSTNAME:dns.question.name} IN %{WORD:dns.answers.type} +%{GREEDYDATA:temp}"
                      }
                    }
              }
            mutate { remove_field => [ "temp" ] }  
            mutate { remove_field => [ "clientIP2" ] } 
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"category" => bind} }
            mutate { update => {"[log][sender][name]" => "dns"}}

          }

          if ([message] =~ /bind/) {
             if ([message] =~ /rpz/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:source.ip}#%{NUMBER:port} %{GREEDYDATA:temp} rpz QNAME NXDOMAIN rewrite %{HOSTNAME:dns.question.name}/%{WORD:dns.answers.type}/IN"
                      }
                    }
              } 
            mutate { remove_field => [ "temp" ] }  
            mutate { remove_field => [ "clientIP2" ] } 
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"action" => blocked} }
            mutate { add_field => {"category" => bind} }
            mutate { update => {"[log][sender][name]" => "dns"}}

          }



          if ([message] =~ /nginx/) {

             if ([message] =~ /access_log/) {
               #nginx: ip=72.137.202.206 username=- [10/Oct/2022:17:18:34 +0000] host=www.chrisstewart.ca request=[GET /category/cybersecurity/vulnerability/ HTTP/1.1] status=200 bytes_sent=12301 referer=[https://www.chrisstewart.ca/category/cybersecurity/] user_agent=[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36] 0.269 0.268 5.20
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "nginx: access_log ip=%{IP:source.ip} username=%{GREEDYDATA:http_username} \[%{GREEDYDATA:http_event_time}\] host=%{GREEDYDATA:http_site} request=\[%{GREEDYDATA:request}\] status=%{NUMBER:http_status} bytes_sent=%{NUMBER:http_bytes} referer=\[%{GREEDYDATA:http_referrer}\] user_agent=\[%{GREEDYDATA:http_user_agent}\] %{NUMBER:request_time} %{NUMBER:response_time} %{GREEDYDATA:gzip_ratio}"
                      }
                    }
              }

   	      #2022/10/10 17:54:11 [error] 496521#0: *79 NAXSI_FMT: ip=170.246.52.65&server=www.chrisstewart.ca&uri=/exchange-vulnerabilities-patch-today/&vers=1.3&total_processed=19&total_blocked=1&config=block&cscore0=$ATTACK&score0=8&zone0=URL&id0=42000418&var_name0=, client: 170.246.52.65, server: chrisstewart.ca, request: "GET /exchange-vulnerabilities-patch-today/ HTTP/1.1", host: "www.chrisstewart.ca"

            mutate { remove_field => [ "temp" ] }  
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"action" => none} }
            mutate { add_field => {"category" => nginx} }

          }

          if ([message] =~ /UFW/) {
             if ([message] =~ /BLOCK/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "SRC\=%{IP:[source][ip]} DST\=%{IP:[destination][ip]} %{GREEDYDATA:temp} PROTO\=%{GREEDYDATA:protocol} SPT\=%{NUMBER:[source][port]} DPT\=%{NUMBER:[destination][port]}"
                      }
                    }
                mutate { add_field => {"action" => blocked} }

              } 

             #2022-10-21T00:31:11.072610+00:00 logger kernel: [871562.805278] [UFW AUDIT] IN= OUT=br-69a02431dc91 SRC=172.18.0.1 DST=172.18.0.6 LEN=177 TOS=0x00 PREC=0x00 TTL=64 ID=61771 DF PROTO=UDP SPT=41372 DPT=6516 LEN=157 
             if ([message] =~ /AUDIT/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "SRC\=%{IP:[source][ip]} DST\=%{IP:[destination][ip]} %{GREEDYDATA:temp} PROTO\=%{GREEDYDATA:protocol} SPT\=%{NUMBER:[source][port]} DPT\=%{NUMBER:[destination][port]}"
                      }
                    }
                mutate { add_field => {"action" => audit} }

              } 


             #2022-10-21T00:20:27.616489+00:00 logger kernel: [870919.367483] [UFW ALLOW] IN= OUT=eth0 SRC=209.145.48.156 DST=159.223.134.30 LEN=121 TOS=0x00 PREC=0x00 TTL=64 ID=4922 PROTO=UDP SPT=43851 DPT=53 LEN=101 
                
             if ([message] =~ /ALLOW/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "SRC\=%{IP:[source][ip]} DST\=%{IP:[destination][ip]} %{GREEDYDATA:temp} PROTO\=%{GREEDYDATA:protocol} SPT\=%{NUMBER:[source][port]} DPT\=%{NUMBER:[destination][port]}"
                      }
                    }
                mutate { add_field => {"action" => allow} }

              } 


            mutate { remove_field => [ "temp" ] }  
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"category" => ufw} }

          }


          if ([message] =~ /user_audit/) {
          
          #Oct 10 03:38:51 unifi cstewart: user_audit cstewart [2300553]: cmd cd /var/log returned_status [0]
          #Oct  9 20:54:35 zeus sshd[3188800]: Accepted password for cstewart from 192.168.6.164 port 49840 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "user_audit %{WORD:username} [%{GREEDYDATA:temp}]: %{GREEDYDATA:command} returned_status[%{GREEDYDATA:command.status}]"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => true} }
              mutate { add_field => {"ai" => user_audit} }       
              mutate { add_field => {"category" => user_audit} }


          }



          if ([message] =~ /sshd/) {

            if ([message] =~ /Accepted password/) {
               #Oct  9 20:54:35 zeus sshd[3188800]: Accepted password for cstewart from 192.168.6.164 port 49840 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "Accepted password for %{WORD:username} from %{IP:source.ip} port %{GREEDYDATA:temp} ssh2"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => true} }
              mutate { add_field => {"ai" => successful_login} }       
              mutate { add_field => {"category" => ssh} }


            }



            if ([message] =~ /Accepted publickey/) {
	       #Oct 10 00:37:17 master sshd[1135]: Accepted publickey for cstewart from 192.168.6.164 port 41262 ssh2: RSA SHA256:YS7oqtS3DrKpWI3WZOF6sItJFIE1RiETy3k1PkANnDY
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "Accepted publickey for %{WORD:username} from %{IP:source.ip} port %{GREEDYDATA:temp} ssh2: %{GREEDYDATA:sshkey}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => true} }
              mutate { add_field => {"ai" => successful_login} }       
              mutate { add_field => {"category" => ssh} }


            }

            if ([message] =~ /authentication failure/) {
               ##ns55 sshd[138406]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=192.168.6.164  user=cstewart
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} rhost\=%{IP:source.ip}  user=%{WORD:username}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => false} }
              mutate { add_field => {"ai" => failed_login} }       
              mutate { add_field => {"category" => ssh} }

            } 

            if ([message] =~ /Failed password for invalid/) {
               ##<133>Feb 21 15:35:09 mon156 auth Feb 21 14:35:09 ssh-honeypot sshd[8261]: Failed password for invalid user guest from 203.106.164.74 port 56896 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} user %{WORD:username} from %{IP:source.ip}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => false} }
              mutate { add_field => {"ai" => invalid_username} }       
              mutate { add_field => {"category" => ssh} }

            } 
            
            if ([message] =~ /Failed/) and ([ai] != "invalid_username") {
               ##<38>Feb 21 02:07:40 hostmaster sshd[1090]: Failed password for cstewart from 192.168.5.50 port 49314 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} for %{WORD:username} from %{IP:source.ip} port %{NUMBER:source.port}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => false} }  
              mutate { add_field => {"ai" => failed_login} }       
              mutate { add_field => {"category" => ssh} }

            } 

          }

        

}

output {
  pipeline {
    send_to => normalization
  }
}	

input {
  tcp {
    port => 5514
    tags => "syslog"
    #add_field => { "init_source" => "os_linux" }
    #add_field => { "client" => "mountbatten" }
    add_field => { "[organization][name]" => "mountbatten" }
    add_field => { "[log][sender][type]" => "os" }
    add_field => { "[log][sender][name]" => "linux" }

  }
}

filter {

      mutate { add_field => {"mlfield" => 1} }
      mutate { convert => ["mlfield","integer"] }

      if "neta_zeek" in [tags] {
          mutate { remove_field => [ "init_source" ] }   
          mutate { add_field => {"init_source" => neta_zeek} }
      }

      if  "neta_suricata" in [tags] {
          mutate { remove_field => [ "init_source" ] }   
          mutate { add_field => {"init_source" => neta_suricata} }
      }

      if  "syslog" in [tags] {

          if ([message] =~ /query:/) {
             if ([message] =~ /ECS/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:clientIP2}#%{NUMBER:port} \(%{HOSTNAME}\): query: %{HOSTNAME:query} IN %{WORD:query_type} +%{GREEDYDATA:temp} \[ECS %{IP:source.ip}/%{NUMBER:subnet}/0]"
                      }
                    }
              } else {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:source.ip}#%{NUMBER:port} \(%{HOSTNAME}\): query: %{HOSTNAME:query} IN %{WORD:query_type} +%{GREEDYDATA:temp}"
                      }
                    }
              }
            mutate { remove_field => [ "temp" ] }  
            mutate { remove_field => [ "clientIP2" ] } 
            mutate { add_field => {"parse" => true} }
          }

          if ([message] =~ /bind/) {
             if ([message] =~ /rpz/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{IP:source.ip}#%{NUMBER:port} %{GREEDYDATA:temp} rpz QNAME NXDOMAIN rewrite %{HOSTNAME:query}/%{WORD:query_type}/IN"
                      }
                    }
              } 
            mutate { remove_field => [ "temp" ] }  
            mutate { remove_field => [ "clientIP2" ] } 
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"action" => blocked} }

          }


          if ([message] =~ /UFW/) {
             if ([message] =~ /BLOCK/) {
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "SRC\=%{IP:source.ip} DST\=%{IP:destination.ip} %{GREEDYDATA:temp} PROTO\=%{GREEDYDATA:protocol} SPT\=%{NUMBER:source.port} DPT\=%{NUMBER:destination.port}"
                      }
                    }
              } 
            mutate { remove_field => [ "temp" ] }  
            mutate { add_field => {"parse" => true} }
            mutate { add_field => {"action" => blocked} }

          }

          if ([message] =~ /sshd/) {

            if ([message] =~ /authentication failure/) {
               ##ns55 sshd[138406]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=192.168.6.164  user=cstewart
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} rhost\=%{IP:source.ip}  user=%{WORD:username}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => failed} }
              mutate { add_field => {"ai" => failed_login} }       

            } 

            if ([message] =~ /Failed password for invalid/) {
               ##<133>Feb 21 15:35:09 mon156 auth Feb 21 14:35:09 ssh-honeypot sshd[8261]: Failed password for invalid user guest from 203.106.164.74 port 56896 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} user %{WORD:username} from %{IP:source.ip}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => failed} }
              mutate { add_field => {"ai" => invalid_username} }       

            } 
            
            if ([message] =~ /Failed/) and ([ai] != "invalid_username") {
               ##<38>Feb 21 02:07:40 hostmaster sshd[1090]: Failed password for cstewart from 192.168.5.50 port 49314 ssh2
               grok {
                      keep_empty_captures => true
                      match => {
                        "message" => "%{WORD:hostname} sshd\[%{GREEDYDATA:temp}]: %{GREEDYDATA:temp} for %{WORD:username} from %{IP:source.ip} port %{NUMBER:source.port}"
                      }
                    }
              mutate { remove_field => [ "temp" ] }  
              mutate { add_field => {"parse" => true} }
              mutate { add_field => {"action" => failed} }  
              mutate { add_field => {"ai" => failed_login} }       

            } 

          }
       }
 }  

output {
  pipeline {
    send_to => normalization
  }
}	

